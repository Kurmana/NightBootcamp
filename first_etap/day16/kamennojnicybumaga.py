import json
import logging
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

import random

markup = ReplyKeyboardMarkup()
markup.add(KeyboardButton('/start'), KeyboardButton('/—Å—á–µ—Ç'))

API_TOKEN = '6065351917:AAGd-NpZerKU4rN-iR9teR6RBGLlvVZW6ls'
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

choices = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']

messagemarkup = InlineKeyboardMarkup()
messagemarkup.add(InlineKeyboardButton('üóø–∫–∞–º–µ–Ω—å', callback_data='–∫–∞–º–µ–Ω—å'), InlineKeyboardButton('‚úÇÔ∏è–Ω–æ–∂–Ω–∏—Ü—ã', callback_data='–Ω–æ–∂–Ω–∏—Ü—ã'), InlineKeyboardButton('üìÑ–±—É–º–∞–≥–∞', callback_data='–±—É–º–∞–≥–∞'))

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer('–î–∞–≤–∞–π—Ç–µ –ø–æ–∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞', reply_markup=markup)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞', reply_markup=messagemarkup)

@dp.message_handler(commands=['—Å—á–µ—Ç'])
async def results(message: types.Message):
    with open('database.json', 'r') as f:
        data = json.load(f)
    user = None
    for i in range(len(data['results'])):
        print(data['results'][i]['user'])
        print(message.from_user.id)
        if data['results'][i]['user'] == message.from_user.id:
            user = data['results'][i]
            break
    if user:
        await message.reply(f'–≤—Å–µ–≥–æ –ø–æ–±–µ–¥ - {user["win"]}\n –≤—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - {user["lose"]}\n –Ω–∏—á—å—è - {user["draw"]}')
    else:
        await message.reply('—Ç—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª')

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer('–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ')

@dp.callback_query_handler()
async def calldatadeffunc(call: types.callback_query):
    with open('database.json', 'r') as f:
        data = json.load(f)
    if call.from_user.id in data['users']:
        pass
    else:
        data['users'].append(call.from_user.id)
        data['results'].append({'user': call.from_user.id, 'win': 0, 'lose': 0, 'draw': 0})

    choice = random.choice(choices)
    if choice == call.data:
        for i in range(len(data['results'])):
            if data['results'][i]['user'] == call.from_user.id:
                data['results'][i]['draw'] += 1
                break
        await bot.send_message(chat_id=call.from_user.id, text='–Ω–∏—á—å—èü§ù')
    elif choice == '–±—É–º–∞–≥–∞' and call.data == '–∫–∞–º–µ–Ω—å' or choice == '–∫–∞–º–µ–Ω—å' and call.data == '–Ω–æ–∂–Ω–∏—Ü—ã' or choice == '–Ω–æ–∂–Ω–∏—Ü—ã' and call.data == '–±—É–º–∞–≥–∞':
        for i in range(len(data['results'])):
            if data['results'][i]['user'] == call.from_user.id:
                data['results'][i]['lose'] += 1
                break
        await bot.send_message(chat_id=call.from_user.id, text=f'–ê —è –≤—ã–±—Ä–∞–ª–∞ {choice}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò≠')
    elif call.data == '–±—É–º–∞–≥–∞' and choice == '–∫–∞–º–µ–Ω—å' or call.data == '–∫–∞–º–µ–Ω—å' and choice == '–Ω–æ–∂–Ω–∏—Ü—ã' or call.data == '–Ω–æ–∂–Ω–∏—Ü—ã' and choice == '–±—É–º–∞–≥–∞':
        for i in range(len(data['results'])):
            if data['results'][i]['user'] == call.from_user.id:
                data['results'][i]['win'] += 1
                break
        await bot.send_message(chat_id=call.from_user.id, text=f'–ê —è –≤—ã–±—Ä–∞–ª–∞ {choice}\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ü•≥')
    with open('database.json', 'w') as f:
        json.dump(data, f)
    await bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', reply_markup=messagemarkup)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)